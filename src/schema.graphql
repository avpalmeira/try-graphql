
type Query {
  info: String!

  feed(
    filter: String
    skip: Int
    first: Int
    orderBy: LinkOrderByInput
  ): Feed!

  link(id: ID!): Link

  user(id: ID!): User
}

type Mutation {
  post(
    url: String!
    description: String!
  ): Link!

  updateLink(
    id: ID!
    url: String
    description: String
  ): Link

  deleteLink(id: ID!): Link

  signup(
    email: String!
    password: String!
    name: String!
  ): AuthPayload

  login(
    email: String!
    password: String!
  ): AuthPayload

  vote(linkId: ID!): Vote
}

type Link {
  id: ID!

  description: String!

  url: String!

  postedBy: User

  votes: [Vote!]!
}

type User {
  id: ID!

  name: String!

  email: String!

  links: [Link!]!

  votes: [Vote!]!
}

type Vote {
  id: ID!

  link: Link!

  user: User!
}

type AuthPayload {
  token: String

  user: User
}

type Subscription {
  newLink: Link

  newVote: Vote
}

type Feed {
  links: [Link!]!

  count: Int!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}
